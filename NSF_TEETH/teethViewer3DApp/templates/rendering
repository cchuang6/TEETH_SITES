var camera, scene, renderer, geometry, material, mesh;
            var editor = new Editor();

            init_test();
            //init_loader();
            animate();
            render();

            function init_loader(){                
                
                editor.storage.init(function () {
        
                editor.storage.get(function (state) {

                if (state !== undefined) {
                    
                    console.log("Location.pathname: " + location.pathname);
                    console.log("fileobject.url:" + "{{ fileobject.url }}");
                    
                    if(confirm("Do you want to delete previous session?")){
                        
                        //Yes
                        
                        editor.config.clear();
                        editor.storage.clear( );
                        loadNewData();
                        
                        
                    }
                    else{
                        //No
                        
                        loadPrevData(state);
                        editor.loader.loadURLFile("{{ fileobject.url }}");
                    }
                

                    

                }else{
                    
                    loadNewData();
                }

                var selected = editor.config.getKey('selected');

                if (selected !== undefined) {

                    editor.selectByUuid(selected);

                }

            });

            //

            var timeout;
            var exporter = new THREE.ObjectExporter();

            var saveState = function (scene) {
            
                clearTimeout(timeout);

                timeout = setTimeout(function () {
                    
                    editor.storage.set(exporter.parse(editor.scene));
                }, 2000);
            };
                        
            var signals = editor.signals;

            signals.objectAdded.add(saveState);
            signals.objectChanged.add(saveState);
            signals.objectRemoved.add(saveState);
            signals.sceneGraphChanged.add(saveState);            

            });

            }

            function loadPrevData(state){
            var loader = new THREE.ObjectLoader();
            var scene = loader.parse(state);                            
            editor.setScene(scene);
        
            };

            function loadPrevData(state){
            var loader = new THREE.ObjectLoader();
            var scene = loader.parse(state);                            
            editor.setScene(scene);
        
            };
            function loadNewData(){
            //create a new mouse event                      
            //simulate(document.getElementById('DirectionalLight'), "click");
            //To Do: add light
            //document.getElementById('DirectionalLight').click();
            editor.loader.loadURLFile("/static/media/uploads/teethmodels/asu_inf.stl");
            elements = document.getElementsByClassName('options');
            for(var i = 0; i < elements.length; i++){
                elements[i].style.display = 'none';
            }
        
            };

            function init_test() {
                scene = new THREE.Scene();

                camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 10000);
                camera.position.z = 500;
                scene.add(camera);
            
                geometry = new THREE.BoxGeometry(200, 200, 200);
                material = new THREE.MeshNormalMaterial();
            
                mesh = new THREE.Mesh(geometry, material);
                scene.add(mesh);
            
                renderer = new THREE.CanvasRenderer();
                renderer.setSize(window.innerWidth, window.innerHeight);
            
                //document.body.appendChild(renderer.domElement);

            }

            function animate() {
            
                requestAnimationFrame(animate);
                render();
            
            }
            
            function render() {
            
                mesh.rotation.x += 0.01;
                mesh.rotation.y += 0.02;
            
                renderer.render(scene, camera);
            
            }

            document.addEventListener('dragover', function (event) {

            event.preventDefault();
            event.dataTransfer.dropEffect = 'copy';

        }, false);

        document.addEventListener('drop', function (event) {

            event.preventDefault();
            editor.loader.loadFile(event.dataTransfer.files[0]);

        }, false);

        document.addEventListener('keydown', function (event) {

            switch (event.keyCode) {

                case 46: // delete

                    editor.removeObject(editor.selected);
                    editor.deselect();

                    break;

            }

        }, false);

        var onWindowResize = function (event) {

            editor.signals.windowResize.dispatch();

        };

        window.addEventListener('resize', onWindowResize, false);

        onWindowResize();